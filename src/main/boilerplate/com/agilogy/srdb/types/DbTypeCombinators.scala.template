package com.agilogy.srdb.types

import java.sql.{PreparedStatement, ResultSet}

/** @group Reader and Type Combinators */
trait DbTypeCombinators{


  [2..22#
  /** @group Reader and Type Combinators */
  implicit def dbType1[[#T1:DbType#]]: NotNullDbType[([#T1#])] = new NotNullDbType[([#T1#])]{
    [#private val t1 = implicitly[DbType[T1]]#
    ]
    override val length: Int = [#t1.length# + ]
    override def get(rs: ResultSet, pos: Int): ([#T1#]) = ([#t1.get(rs,pos [#+ t0.length# ])#])
    override def set(ps: PreparedStatement, pos: Int, value: ([#T1#])): Unit = {
      [#t1.set(ps,pos [#+ t0.length# ], value._1)#
      ]
    }
  }

  /** @group Reader and Type Combinators */
  implicit def positionalDbReader1[[#T1:PositionalDbReader#]]: NotNullPositionalDbReader[([#T1#])] = new NotNullPositionalDbReader[([#T1#])]{
      [#private val t1 = implicitly[PositionalDbReader[T1]]#
      ]
      override val length: Int = [#t1.length# + ]
      override def get(rs: ResultSet, pos: Int): ([#T1#]) = ([#t1.get(rs,pos [#+ t0.length# ])#])
    }
  
  /** @group Reader and Type Combinators */
  def dbType[[#T1:DbType#]]: NotNullDbType[([#T1#])] = dbType1[[#T1#]]
  
  /** @group Reader and Type Combinators */
  def reader[[#T1#]]([#t1:NamedDbReader[T1]#]): NotNullNamedDbReader[([#T1#])] = new NotNullNamedDbReader[([#T1#])]{
    override def get(rs: ResultSet): ([#T1#]) = ([#t1.get(rs)#])
  }
  #
  // $COVERAGE-ON$
  // $COVERAGE-OFF$
  ]
  // $COVERAGE-ON$
}