package com.agilogy.srdb.types

import java.sql.ResultSet

private[types] object HasLength0{
  val length = 0
}

trait DummyCombinator {

    protected[this] val t0 = HasLength0
}

trait DbReaderCombinators{

  [2..22#def reader[[#T1:NamedDbReader#]]: NamedDbReader[([#T1#])] = new NamedDbReader[([#T1#])] with DummyCombinator{
     [#private val t1 = implicitly[NamedDbReader[T1]]#
     ]
     override def get(rs: ResultSet): ([#T1#]) = ([#t1.get(rs)#])
  }
  
  implicit def reader1[[#T1:PositionalDbReader#]]: PositionalDbReader[([#T1#])] = new PositionalDbReader[([#T1#])] with DummyCombinator{
    [#private val t1 = implicitly[PositionalDbReader[T1]]#
    ]
    val length = t0.length [#+ t1.length# ]
    override def get(rs: ResultSet, pos:Int): ([#T1#]) = ([#t1.get(rs,pos [#+ t0.length# ])#])
  }
  #
  ]

}